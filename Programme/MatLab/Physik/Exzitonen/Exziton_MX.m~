function [out1, out2] = Exziton_MX(n,lambda,phi,Potential,Method,Output) 

disp(['Berechnung: ' Output ' des ' Potential '-Potentials'])
dim                 = n+1 ; 

c                = constants(); 
a0               = 1 ;
unitB            = 1/c.e*1e-3 ;   
lambda           = a0^2*B*c.e/c.hbar*unitB;
CONS             = (2*lambda/pi)^0.5 ;

switch Potential
    case 'Coulomb'
        switch Method
            case 'Ana'
                V_ij    = - CONS *exp(gammaPrefactor(0:n)) .*F32(0:n) ;
            case 'Num'     
                try
                    V_ij        = - CONS *csvread(['VC_ij_' num2str(n) '.dat']);
                    
                catch
                    disp('Berechne Coulomb-Matrix erst mit gaussLaguerre.m')
                    Output = 'issMatrix' ; 
                end
                % Vergleich
                % imagesc(exp(gammaPrefactor(0:20)) .*F32(0:20)./V_ij_Num(0:20))
        end 
 

    case 'Keldysh'
        try 
            V_ij        =  - CONS *csvread(['VK_ij_' num2str(n) '.dat']);
            
        catch
            disp('Berechne Keldysh-Matrix erst mit gaussLaguerre.m')
            Output = 'issMatrix' ;
        end
end

Hmx_ii      = @(n)      diag     (  lambda*(2*(0:n)+1) ) ;
Inh_ii      = @(n,phi)  eye(dim)*( -phi    -1i*0.2     ) ;      



switch Output
    case 'Spektrum'
        H           = Hmx_ii(n) + V_ij ;
        b           = ones (     dim    ,1) ;
        X           = zeros(length(phi) ,1) ;
        
        for i=1:length(phi)
            A       = H + Inh_ii(n,phi(i)) ;
            x_n     = linsolve(A,b) ;
            X(i)    = sum(x_n)*lambda/pi ;
        end
        out1        = X ;
        out2        = phi ;
    case 'Eigenwerte'
        H              = Hmx_ii(n) + V_ij ;
        [states, EW]   = eig(H,'vector');
        [EW, idx]      = sort(EW);
        states         = states(:,idx);
        EW             = EW(EW<50) ;
        states         = states(:,EW<50) ;
        [nn,g_nn]      = integrate([0 dim],dim,4) ; 
        norm           = sqrt(2*pi*(states.^2)'*(nn.*g_nn));
        for i=1:length(EW); states(:,i) = states(:,i)*1/norm(i)*sign(states(1,i)); end
         
        % Anzeigen der Grundzustandsenergie
%         disp(EW(1))
        out1            = EW ;
        out2            = states ;
    case 'issMatrix'
        disp('Programm  gestoppt')        
        out1            = [] ;
        out2            = [] ;
end



